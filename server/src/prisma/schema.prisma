generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id               String          @id @default(cuid())
  account_no            String          @unique @db.VarChar(50)
  email                 String          @unique
  password              String
  is_deleted            Boolean         @default(false)
  created_at            DateTime        @default(now()) @db.Timestamp(6)
  updated_at            DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  user_RoleUser_role_id String?
  ActivityLoghs         Activity_Logs[]
  Profile               Profile?
  UserRole              User_Role?      @relation(fields: [user_RoleUser_role_id], references: [user_role_id])
  Group                 Group[]         @relation("UserGroups")
}

model Group {
  group_id    String       @id @default(cuid())
  name        String
  description String?
  is_deleted  Boolean      @default(false)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @updatedAt @db.Timestamp(6)
  Permission  Permission[] @relation("PermissionGroup")
  UserRole    User_Role[]  @relation("RoleGroups")
  User        User[]       @relation("UserGroups")
}

model User_Role {
  user_role_id String       @id @default(cuid())
  name         String       @unique
  description  String?      @db.VarChar(300)
  slug         String
  is_deleted   Boolean      @default(false)
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @updatedAt @db.Timestamp(6)
  User         User[]
  Group        Group[]      @relation("RoleGroups")
  Permission   Permission[] @relation("RolePermission")

  @@index([user_role_id, name])
}

model Permission {
  permission_id String      @id @default(cuid())
  type          String
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  Group         Group[]     @relation("PermissionGroup")
  User_Role     User_Role[] @relation("RolePermission")
}

model Profile {
  profile_id String    @id @default(cuid())
  first_name String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  contact_no String    @db.VarChar(50)
  birthday   DateTime? @db.Date
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  user_id    String?   @unique
  Address    Address[]
  User       User?     @relation(fields: [user_id], references: [user_id])

  @@index([first_name, last_name])
}

model Address {
  address_id     String   @id @default(cuid())
  country        String?  @db.VarChar(200)
  city           String?  @db.VarChar(200)
  province       String?  @db.VarChar(200)
  address_line_1 String?  @db.VarChar(200)
  address_line_2 String?  @db.VarChar(200)
  zipcode        String   @db.VarChar(4)
  is_deleted     Boolean  @default(false)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamp(6)
  profile_id     String?
  Profile        Profile? @relation(fields: [profile_id], references: [profile_id])
}

model Media {
  media_id    String   @id @default(cuid())
  url         String
  file_name   String
  mimetype    String   @db.VarChar(100)
  description String?  @db.VarChar(300)
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(6)

  @@index([media_id, file_name])
}

model Activity_Logs {
  activity_logs_id String   @id @default(cuid())
  title            String   @db.VarChar(300)
  description      String   @db.VarChar(300)
  type             String   @db.VarChar(50)
  is_deleted       Boolean  @default(false)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @updatedAt @db.Timestamp(6)
  user_id          String?
  User             User?    @relation(fields: [user_id], references: [user_id])
}

model Genre {
  genre_id   String   @id @default(cuid())
  name       String   @db.VarChar(50)
  slug       String
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  Movie      Movie[]
}

model Movie {
  movies_id   String   @id @default(cuid())
  name        String   @db.VarChar(100)
  slug        String
  url         String
  description String   @db.Text
  year        Int
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  Genre       Genre[]
}
