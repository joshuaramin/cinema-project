/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Banking account number is a string of 5 to 17 alphanumeric values for representing an generic account number
     */
    AccountNumber<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "AccountNumber";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    BigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    Byte<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Byte";
    /**
     * A country code as defined by ISO 3166-1 alpha-2
     */
    CountryCode<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "CountryCode";
    /**
     * A field whose value conforms to the standard cuid format as specified in https://github.com/ericelliott/cuid#broken-down
     */
    Cuid<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Cuid";
    /**
     * A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.
     */
    Currency<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Currency";
    /**
     * A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
     */
    DID<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DID";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
     */
    DateTimeISO<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTimeISO";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    Datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard DeweyDecimal format as specified by the OCLC https://www.oclc.org/content/dam/oclc/dewey/resources/summaries/deweysummaries.pdf
     */
    DeweyDecimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DeweyDecimal";
    /**
     * A string representing a duration conforming to the ISO8601 standard,
     * such as: P1W1DT13H23M34S
     * P is the duration designator (for period) placed at the start of the duration representation.
     * Y is the year designator that follows the value for the number of years.
     * M is the month designator that follows the value for the number of months.
     * W is the week designator that follows the value for the number of weeks.
     * D is the day designator that follows the value for the number of days.
     * T is the time designator that precedes the time components of the representation.
     * H is the hour designator that follows the value for the number of hours.
     * M is the minute designator that follows the value for the number of minutes.
     * S is the second designator that follows the value for the number of seconds.
     *
     * Note the time designator, T, that precedes the time value.
     *
     * Matches moment.js, Luxon and DateFns implementations
     * ,/. is valid for decimal places and +/- is a valid prefix
     */
    Duration<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Duration";
    /**
     * A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
     */
    EmailAddress<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    Guid<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "GUID";
    /**
     * A field whose value is a CSS HSL color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
     */
    HSL<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "HSL";
    /**
     * A field whose value is a CSS HSLA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
     */
    HSLA<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "HSLA";
    /**
     * A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.
     */
    HexColorCode<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "HexColorCode";
    /**
     * A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal.
     */
    Hexadecimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Hexadecimal";
    /**
     * A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.
     */
    IBAN<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "IBAN";
    /**
     * A field whose value is either an IPv4 or IPv6 address: https://en.wikipedia.org/wiki/IP_address.
     */
    IP<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "IP";
    /**
     * A field whose value is an IPC Class Symbol within the International Patent Classification System: https://www.wipo.int/classifications/ipc/en/
     */
    IPCPatent<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "IPCPatent";
    /**
     * A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
     */
    IPV4<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "IPv4";
    /**
     * A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.
     */
    IPV6<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "IPv6";
    /**
     * A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.
     */
    ISBN<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "ISBN";
    /**
     * A string representing a duration conforming to the ISO8601 standard,
     * such as: P1W1DT13H23M34S
     * P is the duration designator (for period) placed at the start of the duration representation.
     * Y is the year designator that follows the value for the number of years.
     * M is the month designator that follows the value for the number of months.
     * W is the week designator that follows the value for the number of weeks.
     * D is the day designator that follows the value for the number of days.
     * T is the time designator that precedes the time components of the representation.
     * H is the hour designator that follows the value for the number of hours.
     * M is the minute designator that follows the value for the number of minutes.
     * S is the second designator that follows the value for the number of seconds.
     *
     * Note the time designator, T, that precedes the time value.
     *
     * Matches moment.js, Luxon and DateFns implementations
     * ,/. is valid for decimal places and +/- is a valid prefix
     */
    ISO8601Duration<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "ISO8601Duration";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    JSON<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    JSONObject<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    JWT<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JWT";
    /**
     * A field whose value conforms to the Library of Congress Subclass Format ttps://www.loc.gov/catdir/cpso/lcco/
     */
    LLCSubClass<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "LCCSubclass";
    /**
     * A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
     */
    Latitude<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Latitude";
    /**
     * A local date-time string (i.e., with no associated timezone) in `YYYY-MM-DDTHH:mm:ss` format, e.g. `2020-01-01T00:00:00`.
     */
    LocalDateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "LocalDateTime";
    /**
     * A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`.
     */
    LocalDate<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "LocalDate";
    /**
     * A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block.
     */
    LocalEndTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "LocalEndTime";
    /**
     * A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.
     */
    LocalTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "LocalTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    Long<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Long";
    /**
     * A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
     */
    Longitude<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Longitude";
    /**
     * A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.
     */
    MAC<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "MAC";
    /**
     * Integers that will have a value of 0 or less.
     */
    NonPositiveInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "NonPositiveInt";
    /**
     * Floats that will have a value less than 0.
     */
    NegativeFloat<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "NegativeFloat";
    /**
     * Integers that will have a value less than 0.
     */
    NegativeInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "NegativeInt";
    /**
     * A string that cannot be passed as an empty value
     */
    NonEmptyString<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "NonEmptyString";
    /**
     * Floats that will have a value of 0 or more.
     */
    NonNegativeFloat<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "NonNegativeFloat";
    /**
     * Integers that will have a value of 0 or more.
     */
    NonNegativeInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "NonNegativeInt";
    /**
     * Floats that will have a value of 0 or less.
     */
    NonPositiveFloat<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "NonPositiveFloat";
    /**
     * A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
     */
    ObjectID<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "ObjectID";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    PhoneNumber<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports
     */
    Port<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Port";
    /**
     * Floats that will have a value greater than 0.
     */
    PositiveFloat<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PositiveFloat";
    /**
     * Integers that will have a value greater than 0.
     */
    PositiveInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PositiveInt";
    /**
     * A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.
     */
    PostalCode<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PostalCode";
    /**
     * A field whose value is a CSS RGB color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
     */
    RGB<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "RGB";
    /**
     * A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
     */
    RGBA<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "RGBA";
    /**
     * In the US, an ABA routing transit number (`ABA RTN`) is a nine-digit code to identify the financial institution.
     */
    RoutingNubmer<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "RoutingNumber";
    /**
     * A field whose value conforms to the standard personal number (personnummer) formats for Sweden
     */
    SESSN<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "SESSN";
    /**
     * The `SafeInt` scalar type represents non-fractional signed whole numeric values that are considered safe as defined by the ECMAScript specification.
     */
    SafeInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "SafeInt";
    /**
     * A field whose value is a Semantic Version: https://semver.org
     */
    SemVer<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "SemVer";
    /**
     * A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    Time<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Time";
    /**
     * The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
     */
    Timestamp<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Timestamp";
    /**
     * A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones
     */
    Timezone<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "TimeZone";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    URL<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "URL";
    /**
     * A currency string, such as $21.25
     */
    USCurrecny<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "USCurrency";
    /**
     * A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
     */
    UTCOffset<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "UtcOffset";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    UUID<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "UUID";
    /**
     * Integers that will have a value of 0 or more.
     */
    UnsignedInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "UnsignedInt";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
    /**
     * Represents NULL values
     */
    void<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Void";
    /**
     * The locale in the format of a BCP 47 (RFC 5646) standard string
     */
    Locale<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Locale";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Banking account number is a string of 5 to 17 alphanumeric values for representing an generic account number
     */
    AccountNumber<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "AccountNumber";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    BigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    Byte<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Byte";
    /**
     * A country code as defined by ISO 3166-1 alpha-2
     */
    CountryCode<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "CountryCode";
    /**
     * A field whose value conforms to the standard cuid format as specified in https://github.com/ericelliott/cuid#broken-down
     */
    Cuid<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Cuid";
    /**
     * A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.
     */
    Currency<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Currency";
    /**
     * A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
     */
    DID<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DID";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
     */
    DateTimeISO<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTimeISO";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    Datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard DeweyDecimal format as specified by the OCLC https://www.oclc.org/content/dam/oclc/dewey/resources/summaries/deweysummaries.pdf
     */
    DeweyDecimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DeweyDecimal";
    /**
     * A string representing a duration conforming to the ISO8601 standard,
     * such as: P1W1DT13H23M34S
     * P is the duration designator (for period) placed at the start of the duration representation.
     * Y is the year designator that follows the value for the number of years.
     * M is the month designator that follows the value for the number of months.
     * W is the week designator that follows the value for the number of weeks.
     * D is the day designator that follows the value for the number of days.
     * T is the time designator that precedes the time components of the representation.
     * H is the hour designator that follows the value for the number of hours.
     * M is the minute designator that follows the value for the number of minutes.
     * S is the second designator that follows the value for the number of seconds.
     *
     * Note the time designator, T, that precedes the time value.
     *
     * Matches moment.js, Luxon and DateFns implementations
     * ,/. is valid for decimal places and +/- is a valid prefix
     */
    Duration<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Duration";
    /**
     * A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
     */
    EmailAddress<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    Guid<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "GUID";
    /**
     * A field whose value is a CSS HSL color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
     */
    HSL<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "HSL";
    /**
     * A field whose value is a CSS HSLA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
     */
    HSLA<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "HSLA";
    /**
     * A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.
     */
    HexColorCode<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "HexColorCode";
    /**
     * A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal.
     */
    Hexadecimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Hexadecimal";
    /**
     * A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.
     */
    IBAN<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "IBAN";
    /**
     * A field whose value is either an IPv4 or IPv6 address: https://en.wikipedia.org/wiki/IP_address.
     */
    IP<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "IP";
    /**
     * A field whose value is an IPC Class Symbol within the International Patent Classification System: https://www.wipo.int/classifications/ipc/en/
     */
    IPCPatent<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "IPCPatent";
    /**
     * A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
     */
    IPV4<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "IPv4";
    /**
     * A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.
     */
    IPV6<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "IPv6";
    /**
     * A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.
     */
    ISBN<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "ISBN";
    /**
     * A string representing a duration conforming to the ISO8601 standard,
     * such as: P1W1DT13H23M34S
     * P is the duration designator (for period) placed at the start of the duration representation.
     * Y is the year designator that follows the value for the number of years.
     * M is the month designator that follows the value for the number of months.
     * W is the week designator that follows the value for the number of weeks.
     * D is the day designator that follows the value for the number of days.
     * T is the time designator that precedes the time components of the representation.
     * H is the hour designator that follows the value for the number of hours.
     * M is the minute designator that follows the value for the number of minutes.
     * S is the second designator that follows the value for the number of seconds.
     *
     * Note the time designator, T, that precedes the time value.
     *
     * Matches moment.js, Luxon and DateFns implementations
     * ,/. is valid for decimal places and +/- is a valid prefix
     */
    ISO8601Duration<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "ISO8601Duration";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    JSON<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    JSONObject<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    JWT<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JWT";
    /**
     * A field whose value conforms to the Library of Congress Subclass Format ttps://www.loc.gov/catdir/cpso/lcco/
     */
    LLCSubClass<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "LCCSubclass";
    /**
     * A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
     */
    Latitude<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Latitude";
    /**
     * A local date-time string (i.e., with no associated timezone) in `YYYY-MM-DDTHH:mm:ss` format, e.g. `2020-01-01T00:00:00`.
     */
    LocalDateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "LocalDateTime";
    /**
     * A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`.
     */
    LocalDate<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "LocalDate";
    /**
     * A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block.
     */
    LocalEndTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "LocalEndTime";
    /**
     * A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.
     */
    LocalTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "LocalTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    Long<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Long";
    /**
     * A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
     */
    Longitude<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Longitude";
    /**
     * A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.
     */
    MAC<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "MAC";
    /**
     * Integers that will have a value of 0 or less.
     */
    NonPositiveInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NonPositiveInt";
    /**
     * Floats that will have a value less than 0.
     */
    NegativeFloat<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NegativeFloat";
    /**
     * Integers that will have a value less than 0.
     */
    NegativeInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NegativeInt";
    /**
     * A string that cannot be passed as an empty value
     */
    NonEmptyString<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NonEmptyString";
    /**
     * Floats that will have a value of 0 or more.
     */
    NonNegativeFloat<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NonNegativeFloat";
    /**
     * Integers that will have a value of 0 or more.
     */
    NonNegativeInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NonNegativeInt";
    /**
     * Floats that will have a value of 0 or less.
     */
    NonPositiveFloat<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NonPositiveFloat";
    /**
     * A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
     */
    ObjectID<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "ObjectID";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    PhoneNumber<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports
     */
    Port<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Port";
    /**
     * Floats that will have a value greater than 0.
     */
    PositiveFloat<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PositiveFloat";
    /**
     * Integers that will have a value greater than 0.
     */
    PositiveInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PositiveInt";
    /**
     * A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.
     */
    PostalCode<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PostalCode";
    /**
     * A field whose value is a CSS RGB color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
     */
    RGB<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "RGB";
    /**
     * A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
     */
    RGBA<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "RGBA";
    /**
     * In the US, an ABA routing transit number (`ABA RTN`) is a nine-digit code to identify the financial institution.
     */
    RoutingNubmer<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "RoutingNumber";
    /**
     * A field whose value conforms to the standard personal number (personnummer) formats for Sweden
     */
    SESSN<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "SESSN";
    /**
     * The `SafeInt` scalar type represents non-fractional signed whole numeric values that are considered safe as defined by the ECMAScript specification.
     */
    SafeInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "SafeInt";
    /**
     * A field whose value is a Semantic Version: https://semver.org
     */
    SemVer<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "SemVer";
    /**
     * A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    Time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
    /**
     * The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
     */
    Timestamp<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
    /**
     * A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones
     */
    Timezone<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "TimeZone";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    URL<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "URL";
    /**
     * A currency string, such as $21.25
     */
    USCurrecny<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "USCurrency";
    /**
     * A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
     */
    UTCOffset<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "UtcOffset";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    UUID<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "UUID";
    /**
     * Integers that will have a value of 0 or more.
     */
    UnsignedInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "UnsignedInt";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
    /**
     * Represents NULL values
     */
    void<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Void";
    /**
     * The locale in the format of a BCP 47 (RFC 5646) standard string
     */
    Locale<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Locale";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddressInput: { // input type
    address_line_1?: string | null; // String
    address_line_2?: string | null; // String
    city?: string | null; // String
    country?: string | null; // String
    zipcode?: string | null; // String
  }
  AuthInput: { // input type
    email?: string | null; // String
    password?: string | null; // String
  }
  GenreInput: { // input type
    name?: string | null; // String
  }
  GroupInput: { // input type
    description?: string | null; // String
    name?: string | null; // String
    year?: number | null; // Int
  }
  MoviesInput: { // input type
    description?: string | null; // String
    duration?: string | null; // String
    name?: string | null; // String
    release_date?: NexusGenScalars['Date'] | null; // Date
    year?: number | null; // Int
  }
  PaginationInput: { // input type
    page?: number | null; // Int
    take?: number | null; // Int
  }
  ProfileInput: { // input type
    contact_no?: string | null; // String
    first_name?: string | null; // String
    last_name?: string | null; // String
  }
  UserInput: { // input type
    email?: string | null; // String
    password?: string | null; // String
    profile?: NexusGenInputs['ProfileInput'] | null; // ProfileInput
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  AccountNumber: any
  BigInt: any
  Byte: any
  CountryCode: any
  Cuid: any
  Currency: any
  DID: any
  Date: any
  DateTime: any
  DateTimeISO: any
  DeweyDecimal: any
  Duration: any
  EmailAddress: any
  GUID: any
  HSL: any
  HSLA: any
  HexColorCode: any
  Hexadecimal: any
  IBAN: any
  IP: any
  IPCPatent: any
  IPv4: any
  IPv6: any
  ISBN: any
  ISO8601Duration: any
  JSON: any
  JSONObject: any
  JWT: any
  LCCSubclass: any
  Latitude: any
  LocalDate: any
  LocalDateTime: any
  LocalEndTime: any
  LocalTime: any
  Locale: any
  Long: any
  Longitude: any
  MAC: any
  NegativeFloat: any
  NegativeInt: any
  NonEmptyString: any
  NonNegativeFloat: any
  NonNegativeInt: any
  NonPositiveFloat: any
  NonPositiveInt: any
  ObjectID: any
  PhoneNumber: any
  Port: any
  PositiveFloat: any
  PositiveInt: any
  PostalCode: any
  RGB: any
  RGBA: any
  RoutingNumber: any
  SESSN: any
  SafeInt: any
  SemVer: any
  Time: any
  TimeZone: any
  Timestamp: any
  URL: any
  USCurrency: any
  UUID: any
  UnsignedFloat: any
  UnsignedInt: any
  Upload: any
  UtcOffset: any
  Void: any
}

export interface NexusGenObjects {
  ActivityLogsPagination: { // root type
    currentPage?: number | null; // Int
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    item?: Array<NexusGenRootTypes['Activity_Logs'] | null> | null; // [Activity_Logs]
    totalItems?: number | null; // Int
    totalPages?: number | null; // Int
  }
  Activity_Logs: { // root type
    activity_logs_id?: string | null; // ID
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    is_deleted?: boolean | null; // Boolean
    title?: string | null; // String
    type?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Address: { // root type
    address_id?: string | null; // ID
    address_line_1?: string | null; // String
    address_line_2?: string | null; // String
    city?: string | null; // String
    country?: string | null; // String
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    is_deleted?: boolean | null; // Boolean
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  AddressPagination: { // root type
    currentPage?: number | null; // Int
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    item?: Array<NexusGenRootTypes['Address'] | null> | null; // [Address]
    totalItems?: number | null; // Int
    totalPages?: number | null; // Int
  }
  CentralSearch: { // root type
    media?: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    users?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  ErrorObject: { // root type
    message?: string | null; // String
  }
  Genre: { // root type
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    genre_id?: string | null; // ID
    is_deleted?: boolean | null; // Boolean
    name?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  GenrePagination: { // root type
    currentPage?: number | null; // Int
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    item?: Array<NexusGenRootTypes['Genre'] | null> | null; // [Genre]
    totalItems?: number | null; // Int
    totalPages?: number | null; // Int
  }
  Group: { // root type
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    group_id?: string | null; // ID
    is_deleted?: boolean | null; // Boolean
    name?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Media: { // root type
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    file_name?: string | null; // String
    is_deleted?: boolean | null; // Boolean
    media_id?: string | null; // ID
    mimetype?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
    url?: NexusGenScalars['URL'] | null; // URL
  }
  MediaPagination: { // root type
    currentPage?: number | null; // Int
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    item?: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    totalItems?: number | null; // Int
    totalPages?: number | null; // Int
  }
  Movies: { // root type
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    duration?: NexusGenScalars['Duration'] | null; // Duration
    is_deleted?: boolean | null; // Boolean
    movies_id?: string | null; // ID
    name?: string | null; // String
    release_date?: NexusGenScalars['Date'] | null; // Date
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
    url?: string | null; // String
    year?: number | null; // Int
  }
  MoviesPagination: { // root type
    currentPage?: number | null; // Int
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    item?: Array<NexusGenRootTypes['Movies'] | null> | null; // [Movies]
    totalItems?: number | null; // Int
    totalPages?: number | null; // Int
  }
  Mutation: {};
  Permission: { // root type
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    permission_id?: string | null; // ID
    type?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
    value?: string | null; // String
  }
  Profile: { // root type
    contact_no?: string | null; // String
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    first_name?: string | null; // String
    last_name?: string | null; // String
    profile_id?: string | null; // ID
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: {};
  Subscription: {};
  User: { // root type
    account_no?: string | null; // String
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    is_deleted?: boolean | null; // Boolean
    password?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
    user_id?: string | null; // ID
  }
  UserPagination: { // root type
    currentPage?: number | null; // Int
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    item?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    totalItems?: number | null; // Int
    totalPages?: number | null; // Int
  }
  UserRolePagination: { // root type
    currentPage?: number | null; // Int
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    item?: Array<NexusGenRootTypes['User_Role'] | null> | null; // [User_Role]
    totalItems?: number | null; // Int
    totalPages?: number | null; // Int
  }
  User_Role: { // root type
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    is_deleted?: boolean | null; // Boolean
    name?: string | null; // String
    slug?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
    user_role_id?: string | null; // ID
  }
  count: { // root type
    group?: number | null; // Int
    user_roles?: number | null; // Int
    users?: number | null; // Int
  }
  token: { // root type
    token?: string | null; // String
    user_id?: string | null; // ID
  }
}

export interface NexusGenInterfaces {
  Error: NexusGenRootTypes['ErrorObject'];
  Pagination: NexusGenRootTypes['ActivityLogsPagination'] | NexusGenRootTypes['AddressPagination'] | NexusGenRootTypes['GenrePagination'] | NexusGenRootTypes['MediaPagination'] | NexusGenRootTypes['MoviesPagination'] | NexusGenRootTypes['UserPagination'] | NexusGenRootTypes['UserRolePagination'];
  Success: any;
}

export interface NexusGenUnions {
  AddressPayload: NexusGenRootTypes['Address'] | NexusGenRootTypes['ErrorObject'];
  Credentials: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['token'];
  GenrePayload: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['Genre'];
  GroupPayload: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['Group'];
  MoviesPayload: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['Movies'];
  PermissionPayload: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['Permission'];
  ProfilePayload: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['Profile'];
  UserPayload: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['User'];
  UserRolePayload: NexusGenRootTypes['ErrorObject'] | NexusGenRootTypes['User_Role'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  ActivityLogsPagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    item: Array<NexusGenRootTypes['Activity_Logs'] | null> | null; // [Activity_Logs]
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  Activity_Logs: { // field return type
    activity_logs_id: string | null; // ID
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    is_deleted: boolean | null; // Boolean
    title: string | null; // String
    type: string | null; // String
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Address: { // field return type
    address_id: string | null; // ID
    address_line_1: string | null; // String
    address_line_2: string | null; // String
    city: string | null; // String
    country: string | null; // String
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    is_deleted: boolean | null; // Boolean
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  AddressPagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    item: Array<NexusGenRootTypes['Address'] | null> | null; // [Address]
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  CentralSearch: { // field return type
    media: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  ErrorObject: { // field return type
    message: string | null; // String
  }
  Genre: { // field return type
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    genre_id: string | null; // ID
    is_deleted: boolean | null; // Boolean
    movies: NexusGenRootTypes['MoviesPagination'] | null; // MoviesPagination
    name: string | null; // String
    totalMovies: number | null; // Int
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  GenrePagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    item: Array<NexusGenRootTypes['Genre'] | null> | null; // [Genre]
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  Group: { // field return type
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    group_id: string | null; // ID
    is_deleted: boolean | null; // Boolean
    name: string | null; // String
    permission: Array<NexusGenRootTypes['Permission'] | null> | null; // [Permission]
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Media: { // field return type
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    file_name: string | null; // String
    is_deleted: boolean | null; // Boolean
    media_id: string | null; // ID
    mimetype: string | null; // String
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
    url: NexusGenScalars['URL'] | null; // URL
  }
  MediaPagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    item: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  Movies: { // field return type
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    duration: NexusGenScalars['Duration'] | null; // Duration
    genre: Array<NexusGenRootTypes['Genre'] | null> | null; // [Genre]
    is_deleted: boolean | null; // Boolean
    movies_id: string | null; // ID
    name: string | null; // String
    release_date: NexusGenScalars['Date'] | null; // Date
    totalGenre: number | null; // Int
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
    url: string | null; // String
    year: number | null; // Int
  }
  MoviesPagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    item: Array<NexusGenRootTypes['Movies'] | null> | null; // [Movies]
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  Mutation: { // field return type
    add_remove_permission_user_role: NexusGenRootTypes['Permission'] | null; // Permission
    add_user_role: NexusGenRootTypes['User_Role'] | null; // User_Role
    add_user_role_to_group: NexusGenRootTypes['Group'] | null; // Group
    create_address: NexusGenRootTypes['AddressPayload'] | null; // AddressPayload
    create_genre: NexusGenRootTypes['GenrePayload'] | null; // GenrePayload
    create_group: NexusGenRootTypes['GroupPayload'] | null; // GroupPayload
    create_movies: NexusGenRootTypes['MoviesPayload'] | null; // MoviesPayload
    create_role_permission: NexusGenRootTypes['PermissionPayload'] | null; // PermissionPayload
    create_user_account: NexusGenRootTypes['UserPayload'] | null; // UserPayload
    create_user_role: NexusGenRootTypes['UserRolePayload'] | null; // UserRolePayload
    deleteMedia: NexusGenRootTypes['Media'] | null; // Media
    delete_address: NexusGenRootTypes['Address'] | null; // Address
    delete_genre: NexusGenRootTypes['Genre'] | null; // Genre
    delete_group: NexusGenRootTypes['Group'] | null; // Group
    delete_movies: NexusGenRootTypes['Movies'] | null; // Movies
    login: NexusGenRootTypes['Credentials'] | null; // Credentials
    logout_activity_logs: NexusGenRootTypes['Activity_Logs'] | null; // Activity_Logs
    update_address: NexusGenRootTypes['Address'] | null; // Address
    update_genre: NexusGenRootTypes['GenrePayload'] | null; // GenrePayload
    update_group: NexusGenRootTypes['GroupPayload'] | null; // GroupPayload
    update_movies: NexusGenRootTypes['MoviesPayload'] | null; // MoviesPayload
    update_profile: NexusGenRootTypes['ProfilePayload'] | null; // ProfilePayload
  }
  Permission: { // field return type
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    permission_id: string | null; // ID
    type: string | null; // String
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
    value: string | null; // String
  }
  Profile: { // field return type
    address: Array<NexusGenRootTypes['Address'] | null> | null; // [Address]
    contact_no: string | null; // String
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    first_name: string | null; // String
    last_name: string | null; // String
    profile_id: string | null; // ID
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: { // field return type
    countingRecords: NexusGenRootTypes['count'] | null; // count
    getAllActivityLogs: NexusGenRootTypes['ActivityLogsPagination'] | null; // ActivityLogsPagination
    getAllAddressByUserId: NexusGenRootTypes['AddressPagination'] | null; // AddressPagination
    getAllGenre: NexusGenRootTypes['GenrePagination'] | null; // GenrePagination
    getAllGroup: Array<NexusGenRootTypes['Group'] | null> | null; // [Group]
    getAllMedia: NexusGenRootTypes['MediaPagination'] | null; // MediaPagination
    getAllMovies: NexusGenRootTypes['MoviesPagination'] | null; // MoviesPagination
    getAllPermission: Array<NexusGenRootTypes['Permission'] | null> | null; // [Permission]
    getAllUser: NexusGenRootTypes['UserPagination'] | null; // UserPagination
    getAllUserRole: NexusGenRootTypes['UserRolePagination'] | null; // UserRolePagination
    getCentralSearch: NexusGenRootTypes['CentralSearch'] | null; // CentralSearch
    getGenreById: NexusGenRootTypes['Genre'] | null; // Genre
    getMoviesById: NexusGenRootTypes['Movies'] | null; // Movies
    getUserById: NexusGenRootTypes['User'] | null; // User
    getUserRoleBySlug: NexusGenRootTypes['User_Role'] | null; // User_Role
  }
  Subscription: { // field return type
    GenreSubscriptions: NexusGenRootTypes['Genre'] | null; // Genre
    MoviesSubscriptions: NexusGenRootTypes['Movies'] | null; // Movies
  }
  User: { // field return type
    account_no: string | null; // String
    activity_logs: Array<NexusGenRootTypes['Activity_Logs'] | null> | null; // [Activity_Logs]
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    is_deleted: boolean | null; // Boolean
    password: string | null; // String
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
    user_id: string | null; // ID
    user_role: NexusGenRootTypes['User_Role'] | null; // User_Role
  }
  UserPagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    item: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  UserRolePagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    item: Array<NexusGenRootTypes['User_Role'] | null> | null; // [User_Role]
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  User_Role: { // field return type
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    is_deleted: boolean | null; // Boolean
    name: string | null; // String
    permission: Array<NexusGenRootTypes['Permission'] | null> | null; // [Permission]
    slug: string | null; // String
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
    user: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    user_role_id: string | null; // ID
  }
  count: { // field return type
    group: number | null; // Int
    user_roles: number | null; // Int
    users: number | null; // Int
  }
  token: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
    user_id: string | null; // ID
  }
  Error: { // field return type
    message: string | null; // String
  }
  Pagination: { // field return type
    currentPage: number | null; // Int
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    totalItems: number | null; // Int
    totalPages: number | null; // Int
  }
  Success: { // field return type
    method: string | null; // String
    success: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  ActivityLogsPagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    item: 'Activity_Logs'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  Activity_Logs: { // field return type name
    activity_logs_id: 'ID'
    created_at: 'DateTime'
    description: 'String'
    is_deleted: 'Boolean'
    title: 'String'
    type: 'String'
    updated_at: 'DateTime'
  }
  Address: { // field return type name
    address_id: 'ID'
    address_line_1: 'String'
    address_line_2: 'String'
    city: 'String'
    country: 'String'
    created_at: 'DateTime'
    is_deleted: 'Boolean'
    profile: 'Profile'
    updated_at: 'DateTime'
  }
  AddressPagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    item: 'Address'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  CentralSearch: { // field return type name
    media: 'Media'
    users: 'User'
  }
  ErrorObject: { // field return type name
    message: 'String'
  }
  Genre: { // field return type name
    created_at: 'DateTime'
    genre_id: 'ID'
    is_deleted: 'Boolean'
    movies: 'MoviesPagination'
    name: 'String'
    totalMovies: 'Int'
    updated_at: 'DateTime'
  }
  GenrePagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    item: 'Genre'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  Group: { // field return type name
    created_at: 'DateTime'
    description: 'String'
    group_id: 'ID'
    is_deleted: 'Boolean'
    name: 'String'
    permission: 'Permission'
    updated_at: 'DateTime'
  }
  Media: { // field return type name
    created_at: 'DateTime'
    description: 'String'
    file_name: 'String'
    is_deleted: 'Boolean'
    media_id: 'ID'
    mimetype: 'String'
    updated_at: 'DateTime'
    url: 'URL'
  }
  MediaPagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    item: 'Media'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  Movies: { // field return type name
    created_at: 'DateTime'
    description: 'String'
    duration: 'Duration'
    genre: 'Genre'
    is_deleted: 'Boolean'
    movies_id: 'ID'
    name: 'String'
    release_date: 'Date'
    totalGenre: 'Int'
    updated_at: 'DateTime'
    url: 'String'
    year: 'Int'
  }
  MoviesPagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    item: 'Movies'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  Mutation: { // field return type name
    add_remove_permission_user_role: 'Permission'
    add_user_role: 'User_Role'
    add_user_role_to_group: 'Group'
    create_address: 'AddressPayload'
    create_genre: 'GenrePayload'
    create_group: 'GroupPayload'
    create_movies: 'MoviesPayload'
    create_role_permission: 'PermissionPayload'
    create_user_account: 'UserPayload'
    create_user_role: 'UserRolePayload'
    deleteMedia: 'Media'
    delete_address: 'Address'
    delete_genre: 'Genre'
    delete_group: 'Group'
    delete_movies: 'Movies'
    login: 'Credentials'
    logout_activity_logs: 'Activity_Logs'
    update_address: 'Address'
    update_genre: 'GenrePayload'
    update_group: 'GroupPayload'
    update_movies: 'MoviesPayload'
    update_profile: 'ProfilePayload'
  }
  Permission: { // field return type name
    created_at: 'DateTime'
    permission_id: 'ID'
    type: 'String'
    updated_at: 'DateTime'
    value: 'String'
  }
  Profile: { // field return type name
    address: 'Address'
    contact_no: 'String'
    created_at: 'DateTime'
    first_name: 'String'
    last_name: 'String'
    profile_id: 'ID'
    updated_at: 'DateTime'
  }
  Query: { // field return type name
    countingRecords: 'count'
    getAllActivityLogs: 'ActivityLogsPagination'
    getAllAddressByUserId: 'AddressPagination'
    getAllGenre: 'GenrePagination'
    getAllGroup: 'Group'
    getAllMedia: 'MediaPagination'
    getAllMovies: 'MoviesPagination'
    getAllPermission: 'Permission'
    getAllUser: 'UserPagination'
    getAllUserRole: 'UserRolePagination'
    getCentralSearch: 'CentralSearch'
    getGenreById: 'Genre'
    getMoviesById: 'Movies'
    getUserById: 'User'
    getUserRoleBySlug: 'User_Role'
  }
  Subscription: { // field return type name
    GenreSubscriptions: 'Genre'
    MoviesSubscriptions: 'Movies'
  }
  User: { // field return type name
    account_no: 'String'
    activity_logs: 'Activity_Logs'
    created_at: 'DateTime'
    email: 'String'
    is_deleted: 'Boolean'
    password: 'String'
    profile: 'Profile'
    updated_at: 'DateTime'
    user_id: 'ID'
    user_role: 'User_Role'
  }
  UserPagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    item: 'User'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  UserRolePagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    item: 'User_Role'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  User_Role: { // field return type name
    created_at: 'DateTime'
    description: 'String'
    is_deleted: 'Boolean'
    name: 'String'
    permission: 'Permission'
    slug: 'String'
    updated_at: 'DateTime'
    user: 'User'
    user_role_id: 'ID'
  }
  count: { // field return type name
    group: 'Int'
    user_roles: 'Int'
    users: 'Int'
  }
  token: { // field return type name
    token: 'String'
    user: 'User'
    user_id: 'ID'
  }
  Error: { // field return type name
    message: 'String'
  }
  Pagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    totalItems: 'Int'
    totalPages: 'Int'
  }
  Success: { // field return type name
    method: 'String'
    success: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Genre: {
    movies: { // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
      search?: string | null; // String
    }
  }
  Mutation: {
    add_remove_permission_user_role: { // args
      add: Array<string | null>; // [String]!
      removed: Array<string | null>; // [String]!
      user_role_id: string; // ID!
    }
    add_user_role: { // args
      user_id: string; // ID!
      user_role_id: string; // ID!
    }
    add_user_role_to_group: { // args
      group_id: string; // ID!
      user_role_id: string; // ID!
    }
    create_address: { // args
      input: NexusGenInputs['AddressInput']; // AddressInput!
      profile_id: string; // ID!
    }
    create_genre: { // args
      input?: NexusGenInputs['GenreInput'] | null; // GenreInput
    }
    create_group: { // args
      input?: NexusGenInputs['GroupInput'] | null; // GroupInput
    }
    create_movies: { // args
      file?: NexusGenScalars['Upload'] | null; // Upload
      genre_id: string[]; // [ID!]!
      input?: NexusGenInputs['MoviesInput'] | null; // MoviesInput
    }
    create_role_permission: { // args
      group_id: string; // ID!
      type: string; // String!
    }
    create_user_account: { // args
      address: NexusGenInputs['AddressInput']; // AddressInput!
      input: NexusGenInputs['UserInput']; // UserInput!
      user_role_id: string; // ID!
    }
    create_user_role: { // args
      description?: string | null; // String
      name: string; // String!
    }
    deleteMedia: { // args
      media_id: string; // ID!
    }
    delete_address: { // args
      address_id: string; // ID!
    }
    delete_genre: { // args
      genre_id: string; // ID!
    }
    delete_group: { // args
      group_id: string; // ID!
    }
    delete_movies: { // args
      movies_id: string; // ID!
    }
    login: { // args
      input?: NexusGenInputs['AuthInput'] | null; // AuthInput
    }
    logout_activity_logs: { // args
      user_id: string; // ID!
    }
    update_address: { // args
      address_id: string; // ID!
      input: NexusGenInputs['AddressInput']; // AddressInput!
    }
    update_genre: { // args
      genre_id: string; // ID!
      input?: NexusGenInputs['GenreInput'] | null; // GenreInput
    }
    update_group: { // args
      group_id: string; // ID!
      input?: NexusGenInputs['GroupInput'] | null; // GroupInput
    }
    update_movies: { // args
      file?: NexusGenScalars['Upload'] | null; // Upload
      input?: NexusGenInputs['MoviesInput'] | null; // MoviesInput
      movies_id: string; // ID!
    }
    update_profile: { // args
      input: NexusGenInputs['ProfileInput']; // ProfileInput!
      profile_id: string; // ID!
    }
  }
  Query: {
    getAllActivityLogs: { // args
      input: NexusGenInputs['PaginationInput']; // PaginationInput!
    }
    getAllAddressByUserId: { // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
      profile_id: string; // ID!
    }
    getAllGenre: { // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
      search?: string | null; // String
    }
    getAllGroup: { // args
      search?: string | null; // String
    }
    getAllMedia: { // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    }
    getAllMovies: { // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
      search?: string | null; // String
    }
    getAllUser: { // args
      input: NexusGenInputs['PaginationInput']; // PaginationInput!
    }
    getAllUserRole: { // args
      input: NexusGenInputs['PaginationInput']; // PaginationInput!
      search?: string | null; // String
    }
    getCentralSearch: { // args
      search?: string | null; // String
    }
    getGenreById: { // args
      genre_id: string; // ID!
    }
    getMoviesById: { // args
      movies_id: string; // ID!
    }
    getUserById: { // args
      user_id: string; // ID!
    }
    getUserRoleBySlug: { // args
      slug: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  AddressPayload: "Address" | "ErrorObject"
  Credentials: "ErrorObject" | "token"
  GenrePayload: "ErrorObject" | "Genre"
  GroupPayload: "ErrorObject" | "Group"
  MoviesPayload: "ErrorObject" | "Movies"
  PermissionPayload: "ErrorObject" | "Permission"
  ProfilePayload: "ErrorObject" | "Profile"
  UserPayload: "ErrorObject" | "User"
  UserRolePayload: "ErrorObject" | "User_Role"
  Error: "ErrorObject"
  Pagination: "ActivityLogsPagination" | "AddressPagination" | "GenrePagination" | "MediaPagination" | "MoviesPagination" | "UserPagination" | "UserRolePagination"
}

export interface NexusGenTypeInterfaces {
  ActivityLogsPagination: "Pagination"
  AddressPagination: "Pagination"
  ErrorObject: "Error"
  GenrePagination: "Pagination"
  MediaPagination: "Pagination"
  MoviesPagination: "Pagination"
  UserPagination: "Pagination"
  UserRolePagination: "Pagination"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false
    isTypeOf: false
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}